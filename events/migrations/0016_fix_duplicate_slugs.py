# Generated by Django 4.2.15 on 2025-09-11 00:30

from django.db import migrations
from django.utils.text import slugify


def fix_duplicate_slugs(apps, schema_editor):
    Event = apps.get_model('events', 'Event')
    
    # Get all events
    events = Event.objects.all()
    
    if events.exists():
        # Set the first active event as main (if not already set)
        main_event = events.filter(active=True, is_main=True).first()
        if not main_event:
            main_event = events.filter(active=True).first()
            if main_event:
                main_event.is_main = True
                main_event.save()
        
        # Fix duplicate slugs
        used_slugs = set()
        for event in events:
            if not event.slug:
                # Generate base slug
                base_slug = slugify(event.name)
                slug = base_slug
                counter = 1
                
                # Handle duplicates by adding counter
                while slug in used_slugs:
                    slug = f"{base_slug}-{counter}"
                    counter += 1
                
                event.slug = slug
                used_slugs.add(slug)
                event.save()
            else:
                # Check if existing slug is duplicate
                if event.slug in used_slugs:
                    # Generate new unique slug
                    base_slug = slugify(event.name)
                    slug = base_slug
                    counter = 1
                    
                    while slug in used_slugs:
                        slug = f"{base_slug}-{counter}"
                        counter += 1
                    
                    event.slug = slug
                    used_slugs.add(slug)
                    event.save()
                else:
                    used_slugs.add(event.slug)


def reverse_fix_duplicate_slugs(apps, schema_editor):
    Event = apps.get_model('events', 'Event')
    
    # Clear slugs and main event flag
    Event.objects.update(slug=None, is_main=False)


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0015_populate_slugs_and_set_main_event'),
    ]

    operations = [
        migrations.RunPython(
            fix_duplicate_slugs,
            reverse_fix_duplicate_slugs
        ),
    ]
